name: Automed CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: automed

jobs:
  # Backend Tests and Build
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          patient-service,
          hospital-service,
          consultation-service,
          ai-service,
          clinical-decision-service,
          workflow-automation-service,
          sync-service,
          tenant-service,
          monitoring-service
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run tests for ${{ matrix.service }}
      run: |
        cd backend/${{ matrix.service }}
        ./gradlew test jacocoTestReport

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.service }}
        path: backend/${{ matrix.service }}/build/reports/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/${{ matrix.service }}/build/reports/jacoco/test/jacocoTestReport.xml
        flags: backend-${{ matrix.service }}

  # Frontend Tests and Build
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'

    - name: Get Flutter dependencies
      run: |
        cd frontend/automed_app
        flutter pub get

    - name: Run code generation
      run: |
        cd frontend/automed_app
        dart run build_runner build --delete-conflicting-outputs

    - name: Analyze Flutter code
      run: |
        cd frontend/automed_app
        flutter analyze

    - name: Run Flutter tests
      run: |
        cd frontend/automed_app
        flutter test --coverage

    - name: Upload Flutter coverage
      uses: codecov/codecov-action@v3
      with:
        file: frontend/automed_app/coverage/lcov.info
        flags: frontend

    - name: Run integration tests
      run: |
        cd frontend/automed_app
        flutter drive --driver=test_driver/integration_test.dart --target=integration_test/app_integration_test.dart

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'automed'
        path: '.'
        format: 'ALL'

    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [
          api-gateway,
          patient-service,
          hospital-service,
          consultation-service,
          ai-service,
          clinical-decision-service,
          workflow-automation-service,
          sync-service,
          tenant-service,
          monitoring-service
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend/${{ matrix.service }}
        file: backend/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Build Flutter Web App
  build-flutter-web:
    runs-on: ubuntu-latest
    needs: [frontend-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'

    - name: Get Flutter dependencies
      run: |
        cd frontend/automed_app
        flutter pub get

    - name: Run code generation
      run: |
        cd frontend/automed_app
        dart run build_runner build --delete-conflicting-outputs

    - name: Build Flutter web
      run: |
        cd frontend/automed_app
        flutter build web --release

    - name: Upload web build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: flutter-web-build
        path: frontend/automed_app/build/web/

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, build-flutter-web]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in Kubernetes manifests
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/staging/*.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/staging/namespace.yaml
        kubectl apply -f k8s/staging/
        
        # Wait for deployment to complete
        kubectl rollout status deployment/api-gateway -n automed-staging
        kubectl rollout status deployment/patient-service -n automed-staging
        kubectl rollout status deployment/hospital-service -n automed-staging
        kubectl rollout status deployment/consultation-service -n automed-staging

    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Run basic health checks
        curl -f http://staging.automed.com/health || exit 1
        curl -f http://staging.automed.com/api/patients/health || exit 1
        curl -f http://staging.automed.com/api/hospitals/health || exit 1

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Artillery
      run: npm install -g artillery

    - name: Run performance tests
      run: |
        cd performance-tests
        artillery run load-test.yml --output report.json

    - name: Generate performance report
      run: |
        cd performance-tests
        artillery report report.json --output report.html

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: performance-tests/report.html

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in Kubernetes manifests
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/production/*.yaml
        
        # Apply Kubernetes manifests with rolling update
        kubectl apply -f k8s/production/namespace.yaml
        kubectl apply -f k8s/production/
        
        # Wait for deployment to complete
        kubectl rollout status deployment/api-gateway -n automed-production --timeout=600s
        kubectl rollout status deployment/patient-service -n automed-production --timeout=600s
        kubectl rollout status deployment/hospital-service -n automed-production --timeout=600s
        kubectl rollout status deployment/consultation-service -n automed-production --timeout=600s

    - name: Run production health checks
      run: |
        # Wait for services to be ready
        sleep 120
        
        # Run comprehensive health checks
        curl -f https://api.automed.com/health || exit 1
        curl -f https://api.automed.com/api/patients/health || exit 1
        curl -f https://api.automed.com/api/hospitals/health || exit 1
        curl -f https://api.automed.com/api/consultations/health || exit 1
        curl -f https://api.automed.com/api/ai/health || exit 1

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Automed deployment to production completed successfully! 🚀'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback on Failure
  rollback-on-failure:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    
    steps:
    - name: Rollback production deployment
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Rollback to previous version
        kubectl rollout undo deployment/api-gateway -n automed-production
        kubectl rollout undo deployment/patient-service -n automed-production
        kubectl rollout undo deployment/hospital-service -n automed-production
        kubectl rollout undo deployment/consultation-service -n automed-production

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Automed deployment failed and has been rolled back! ⚠️'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}